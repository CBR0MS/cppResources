//  File: Prey.cpp
//  Created by Christian Broms on 4/7/17.

#include <iostream>
#include <vector>
#include <algorithm>
#include "Prey.hpp"
#include "Organism.hpp"

Prey::Prey(int rowLoc, int colLoc)
	: Organism(rowLoc, colLoc)
{
	symb = 'O';
}


void Prey::move(Organism* arr[20][20]) { 

	/*
	PREY RULES: can move in any direction one square at a time
	If all move options are filled, remain sationary.
	If the prey moves three squares, make a new ant in a one of the squares around it
	This ant continues with the same rules as the parent ant
	After three more steps, the parent and child can make new offspring
	*/

	// checking move count
	if (arr[i][j]->moves == 3) {
		reproduce(arr);
		arr[i][j]->moves = 0;
	}
	else {

		bool place = true;
		std::vector<int> randomNums = { 1, 2, 3, 4 }; // vector for possible locations
		std::random_shuffle(randomNums.begin(), randomNums.end()); // randomly suffling the movement possiblilities (the vector)

		for (int k = 0; k < 4; k++) {

			if (place) {

				switch (randomNums.at(k)) { // now we check the location as generated by the random shuffle

				case 1: // move right
					if (j + 1 < 20) {
						if (arr[i][j + 1]->symb != 'X' && arr[i][j + 1]->symb != 'O') {
							arr[i][j + 1] = new Prey(i, j + 1);
							arr[i][j + 1]->moves = arr[i][j]->moves++;
							arr[i][j] = new Organism(i, j);
							place = false;
						}
					}
					break;
				case 2: // move left 
					if (j - 1 >= 0) {
						if (arr[i][j - 1]->symb != 'X' && arr[i][j - 1]->symb != 'O') {
							arr[i][j - 1] = new Prey(i, j - 1);
							arr[i][j - 1]->moves = arr[i][j]->moves++;
							arr[i][j] = new Organism(i, j);
							place = false;
						}
					}
					break;
				case 3: // move bottom
					if (i + 1 < 20) {
						if (arr[i + 1][j]->symb != 'X' && arr[i + 1][j]->symb != 'O') {
							arr[i + 1][j] = new Prey(i + 1, j);
							arr[i + 1][j]->moves = arr[i][j]->moves++;
							arr[i][j] = new Organism(i, j);
							place = false;
						}
					}
					break;
				case 4: // move top
					if (i - 1 >= 0) {
						if (arr[i - 1][j]->symb != 'X' && arr[i - 1][j]->symb != 'O') {
							arr[i - 1][j] = new Prey(i - 1, j);
							arr[i - 1][j]->moves = arr[i][j]->moves++;
							arr[i][j] = new Organism(i, j);
							place = false;
						}
					}
					break;
				}
			}
		}
	}
}

void Prey::reproduce(Organism* arr[20][20]) {

	bool done = false;

	if (j + 1 < 20) { // checking the right 

		if (arr[i][j + 1]->symb == ' ') {
			arr[i][j + 1] = new Prey(i, j + 1);
			done = true;
		}
	}
	else if (j - 1 >= 0 && !done) { // checking the left

		if (arr[i][j - 1]->symb == ' ') {
			arr[i][j - 1] = new Prey(i, j - 1);
			done = true;
		}
	}
	else if (i + 1 < 20 && !done) { // checking the bottom

		if (arr[i + 1][j]->symb == ' ') {
			arr[i + 1][j] = new Prey(i + 1, j);
			done = true;
		}
	}
	else if (i - 1 >= 0 && !done) { // checking the top

		if (arr[i - 1][j]->symb == ' ') {
			arr[i - 1][j] = new Prey(i - 1, j);
			done = true;
		}
	}
}

std::ostream& operator<<(std::ostream& out, const Prey& print) {

	out << print.symb;
	return out;
}
